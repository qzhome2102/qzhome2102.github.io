https://my.l3.ee

https://idc.6y.ee/

https://www.coalcloud.net/

https://scarlet-cloud.net/

https://www.cloudiplc.com/


https://www.xiuluohost.com/

https://olvps.com/


=======关闭各类防火墙=======
systemctl stop firewalld
systemctl disable firewalld
systemctl stop nftables
systemctl disable nftables
systemctl stop ufw
systemctl disable ufw


====================
下载并解压：wget -N --no-check-certificate https://studygolang.com/dl/golang/go1.14.1.linux-amd64.tar.gz && tar -zxvf go1.14.1.linux-amd64.tar.gz

mv go/ /usr/local/

vi /etc/profile

变量值在底部加入：export PATH=$PATH:/usr/local/go/bin

source /etc/profile

go version


wget -N --no-check-certificate https://github.com/ginuerzh/gost/releases/download/v2.11.0/gost-linux-amd64-2.11.0.gz && gzip -d gost-linux-amd64-2.11.0.gz
mv gost-linux-amd64-2.11.0 gost
chmod +x gost




cd /root/gost && nohup ./gost -L=:54123/173.82.202.67:54123 -F=ws://173.82.202.67:443/ws &      中转机


cd /root/gost && nohup ./gost -D -L "ws://:443?path=/ws&rbuf=4096&wbuf=4096&compression=false" &  SSR-VPS落地机


wget "https://github.com/chiakge/Linux-NetSpeed/raw/master/tcp.sh" && chmod +x tcp.sh && ./tcp.sh

BBR

预先准备
centos：yum install ca-certificates wget -y && update-ca-trust force-enable
debian/ubuntu：apt-get install ca-certificates wget -y && update-ca-certificates

不卸载内核版本
wget -N "https://github.000060000.xyz/tcpx.sh" && chmod +x tcpx.sh && ./tcpx.sh
卸载内核版本
wget -N "https://github.000060000.xyz/tcp.sh" && chmod +x tcp.sh && ./tcp.sh



wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh && chmod +x shadowsocksR.sh && ./shadowsocksR.sh 2>&1 | tee shadowsocksR.log

wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh && chmod +x shadowsocks-all.sh && ./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.sh.log

wget -qO natcfg.sh https://raw.githubusercontent.com/arloor/iptablesUtils/master/natcfg.sh && bash natcfg.sh



iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 443 -j ACCEPT
iptables -I INPUT -m state --state NEW -m udp -p udp --dport 80 -j ACCEPT
iptables -I INPUT -m state --state NEW -m udp -p udp --dport 443 -j ACCEPT

ubuntu 16 开机启用 脚本
注：/etc/rc.local是不是755权限

root@localhost:~# vi /etc/rc.local
#!/bin/bash
touch /var/lock/subsys/local
/bin/sh /root/frpc.sh



=========socks5==================

./gost -L=socks5://username:password@:port -F=ss://chacha20:password@IP:port
Shell 复制
//前面的username password port是自己随便设置的
//后面的password ip port是国外已经配置好的ss

======================
端口转发
------------------
服务端  落地机

./gost -L relay://:12345

客户端   中转机

./gost -L udp://:13653/92.38.129.18:443 -L tcp://:13653/92.38.129.18:443 -F relay://92.38.129.18:12345
--------------------
转发隧道
-----------------------
服务端  落地机

./gost -L relay://:12345/92.38.129.18:443

客户端   中转机

./gost -L udp://:13653 -L tcp://:13653 -F relay://92.38.129.18:12345
-------------------------

cd /root/gost && nohup ./gost -L=tcp://:13698/92.38.129.18:54443 -L=udp://:13698/92.38.129.18:54443 &    直接中转相当iptables
==============================


./gost -L ss2+mwss://AEAD_CHACHA20_POLY1305:qaz100200@:55005  落地机


./gost -L=socks5://user:qq123456@:55005 -F=ss2+mwss://AEAD_CHACHA20_POLY1305:qaz100200@192.3.249.206:55005  中转机




v2ray

./gost -L tcp://:10038 -L udp://:10038 -F forward+mtls://185.238.250.81:8080?mbind=true  中转机

./gost -L mtls://:8080/127.0.0.1:443   落地机


ssr        443端口通讯端口  8080是SSR端口

./gost -L tcp://:666 -L udp://:666 -F relay+mtls://185.238.250.81:443   中转机

./gost -L relay+mtls://:443/185.238.250.81:8080             落地机


可以用relay+mtls  relay+tls   relay+mwss  relay+wss

tls - TLS

mtls - Multiplex TLS，在TLS上增加多路复用功能 (2.5+)

ws - Websocket

mws - Multiplex Websocket，在Websocket上增加多路复用功能 (2.5+)

wss - Websocket Secure，基于TLS加密的Websocket

mwss - Multiplex Websocket Secure，在基于TLS加密的Websocket上增加多路复用功能 (2.5+)

旧的SSR 

cd /root/gost && nohup ./gost -L=:13688/156.96.105.89:54122 -F=ws://156.96.105.89:443/ws &   中转机


cd /root/gost && nohup .gost -L "ws://:443?path=/ws&rbuf=4096&wbuf=4096&compression=false" &   落地机

===ss===gost======

./gost -L "relay+h2://admin:password@:1443?cert=/root/1.cer&key=/root/1.key&ca=/root/1.ca"   落地机

./gost -L ss://aes-256-gcm:qaz100200@:12345 -F "relay+h2://admin:password@ghh.nb06.com:1443?cert=/root/gost/1.cer&key=/root/gost/1.key&ca=/root/gost/1.ca&secure=true"    中转机

域名 解析 落地机IP 
=================


  用配置方式  注意 /root/gost/gost -C /root/gost.json  gost文件和配置文件 所在地址

./gost -L=:13688/156.96.106.90:54122 -F=ws://156.96.106.90:443/ws
./gost -L tcp://:13636 -L udp://:13636 -F relay+mwss://156.96.106.90:1443
./gost -L=tcp://:13698/92.38.130.19:54443 -L=udp://:13698/92.38.130.19:54443
./gost -L=tcp://:13666/92.38.130.19:443 -L=udp://:13666/92.38.130.19:443


ServeNodes 相当 -L   ChainNodes   相当 -F

{
    "Debug": true,                       
    "Retries": 0,
    "ServeNodes": [
        "tcp://:13636",
        "udp://:13636"
    ],
    "ChainNodes": [
        "relay+mwss://156.96.106.90:1443"
    ],


    "Routes": [
        {
            "Retries": 0,
            "ServeNodes": [
                "tcp://:13688/156.96.106.90:54122",
                "udp://:13688/156.96.106.90:54122"
            ],
           "ChainNodes": [
                "ws://156.96.106.90:443/ws"
            ]
        },


        {
            "Retries": 0,
            "ServeNodes": [
                "tcp://:13698/92.38.130.19:54443",
                "udp://:13698/92.38.130.19:54443"
            ]
        },


        {
            "Retries": 0,
            "ServeNodes": [
                "tcp://:13666/92.38.130.19:443",
                "udp://:13666/92.38.130.19:443"
            ]
        }


    ]

}
=============
如果单条可以这样写
{
    "Debug": true,
    "Retries": 0,
    "ServeNodes": [
        "tcp://:13636",
        "udp://:13636"
    ],
    "ChainNodes": [
        "relay+mwss://156.96.106.90:1443"
    ]
}



vi /usr/lib/systemd/system/gost.service
或
vi /etc/systemd/system/gost.service


cat > /etc/systemd/system/gost.service <<-EOF
[Unit]
Description=gost
After=network-online.target
Wants=network-online.target systemd-networkd-wait-online.service

[Service]
Type=simple
User=root
DynamicUser=true
ExecStart=/root/gost/gost -C /root/gost/gost.json
KillMode=control-group
Restart=always
RestartSec=10s

[Install]
WantedBy=multi-user.target
EOF

重启 
systemctl restart gost.service
状态 
systemctl status gost.service
自启 
systemctl enable gost.service
停止
systemctl stop gost.service





==========在Ubuntu 18.04/16.04/14.04====nginx tls1.3==========


要在Ubuntu上添加Nginx PPA，请运行以下命令：

sudo add-apt-repository ppa:ondrej/nginx

sudo apt update

然后删除现有的Nginx包（你的Nginx配置文件不会被删除）：
  
sudo apt remove nginx

如果你使用iRedMail和Nginx，那么运行sudo apt remove nginx-full来删除Nginx。

并从PPA安装Nginx：

sudo apt install nginx

运行，则需要升级OpenSSL软件包：

sudo apt upgrade

========================
VPS增加交换内存
解决内存低于512M的问题

1、使用root用户登陆，进入一个目录

cd /var/
2、获取512MB的文件块：（一般设置为内存的2倍，count后面的数为要设置的swap大小xxMB，以下以1G为例）

dd if=/dev/zero of=swapfile bs=1M count=1024
3、创建swap文件

/sbin/mkswap swapfile
4、激活swap文件

/sbin/swapon swapfile
5、查看一下swap是否正确：

/sbin/swapon -s
另外为了安全建议执行：

chmod 0644 /var/swapfile
改一下权限
6、加到fstab文件中让系统引导时自动启动

vi /etc/fstab
在末尾增加以下内容：

/var/swapfile swap swap defaults 0 0
也可以直接执行如下命令，感觉这样更方便

echo "/var/swapfile swap swap defaults 0 0" >>/etc/fstab

====================================Xray====================


更新证书 ssl.sh

#!/bin/bash

/root/.acme.sh/acme.sh --issue -d jpxx.zzz.com -w /home/jpxx.zzz.com -k ec-256 --fullchain-file /usr/local/etc/xray/fullchain.cer --key-file /usr/local/etc/xray/jpxx.zzz.com.key --force
echo "Xray Certificates Renewed"
       
chmod +r /usr/local/etc/xray/jpxx.zzz.com.key
echo "Read Permission Granted for Private Key"

systemctl restart xray
echo "Xray Restarted"

添加定时任务
nano /etc/crontab

0 1     1 * *   root    bash /root/ssl.sh


systemctl status cron
systemctl restart cron
systemctl reload  cron

================BBR=================

预先准备
centos：yum install ca-certificates wget -y && update-ca-trust force-enable
debian/ubuntu：apt-get install ca-certificates wget -y && update-ca-certificates

不卸载内核版本
wget -O tcpx.sh "https://git.io/JYxKU" && chmod +x tcpx.sh && ./tcpx.sh
卸载内核版本
wget -O tcp.sh "https://git.io/coolspeeda" && chmod +x tcp.sh && ./tcp.sh

=====================p安装XRAY============
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install


systemctl restart xray

systemctl status xray


xray模板


{
  "log": {
    "access": "/var/log/xray/access.log",
    "error": "/var/log/xray/error.log",
    "loglevel": "warning"
  },
  "inbounds": [
    {
      "port": 443,
      "protocol": "vless",
      "settings": {
        "clients": [
          {
            "id": "c8639467-5433-4970-bdb6-feaa73ab0fa7",
            "flow": "xtls-rprx-direct"
          }
        ],
        "decryption": "none",
        "fallbacks": [
          {
            "dest": 60000,
            "alpn": "",
            "xver": 1
          },
          {
            "dest": 60001,
            "alpn": "h2",
            "xver": 1
          },
          {
            "dest": 60002,
            "path": "/xix/",
            "xver": 1
          }
        ]
      },
      "streamSettings": {
        "network": "tcp",
        "security": "xtls",
        "xtlsSettings": {
          "minVersion": "1.2",
          "certificates": [
            {
              "certificateFile": "/usr/local/etc/xray/fullchain.cer",
              "keyFile": "/usr/local/etc/xray/jpxx.zzz.com.key"
            }
          ]
        }
      },
      "sniffing": {
        "enabled": true,
        "destOverride": [
          "http",
          "tls"
        ]
      }
    },
    {
      "port": 60002,
      "listen": "127.0.0.1",
      "protocol": "vless",
      "settings": {
        "clients": [
          {
            "id": "c8639467-5433-4970-bdb6-feaa73ab0fa7"
          }
        ],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "ws",
        "security": "none",
        "wsSettings": {
          "acceptProxyProtocol": true,
          "path": "/xix/"
        }
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom"
    }
  ]
}


======xray 模版2=======

{
    "log": {
        "loglevel": "warning"
    },
    "inbounds": [
        {
            "port": 443,
            "protocol": "vless",
            "settings": {
                "clients": [
                    {
                        "id": "c4616432-97cd-4514-8979-f3a426fccdfd", // 填写你的 UUID
                        "flow": "xtls-rprx-direct",
                        "level": 0,
                        "email": "love@example.com"
                    }
                ],
                "decryption": "none",
                "fallbacks": [
                    {
                        "dest": 1310, // 默认回落到 Xray 的 Trojan 协议
                        "xver": 1
                    },
                    {
                        "path": "/websocket", // 必须换成自定义的 PATH
                        "dest": 1234,
                        "xver": 1
                    },
                    {
                        "path": "/vmesstcp", // 必须换成自定义的 PATH
                        "dest": 2345,
                        "xver": 1
                    },
                    {
                        "path": "/vmessws", // 必须换成自定义的 PATH
                        "dest": 3456,
                        "xver": 1
                    }
                ]
            },
            "streamSettings": {
                "network": "tcp",
                "security": "xtls",
                "xtlsSettings": {
                    "alpn": [
                        "http/1.1"
                    ],
                    "certificates": [
                        {
                            "certificateFile": "/usr/local/etc/xray/cert/cert.crt", // 换成你的证书，绝对路径
                            "keyFile": "/usr/local/etc/xray/cert/private.key" // 换成你的私钥，绝对路径
                        }
                    ]
                }
            }
        },
        {
            "port": 1310,
            "listen": "127.0.0.1",
            "protocol": "trojan",
            "settings": {
                "clients": [
                    {
                        "password": "00000000", // 填写你的密码
                        "level": 0,
                        "email": "love@example.com"
                    }
                ],
                "fallbacks": [
                    {
                        "dest": 80 // 或者回落到其它也防探测的代理
                    }
                ]
            },
            "streamSettings": {
                "network": "tcp",
                "security": "none",
                "tcpSettings": {
                    "acceptProxyProtocol": true
                }
            }
        },
        {
            "port": 1234,
            "listen": "127.0.0.1",
            "protocol": "vless",
            "settings": {
                "clients": [
                    {
                        "id": "c4616432-97cd-4514-8979-f3a426fccdfd", // 填写你的 UUID
                        "level": 0,
                        "email": "love@example.com"
                    }
                ],
                "decryption": "none"
            },
            "streamSettings": {
                "network": "ws",
                "security": "none",
                "wsSettings": {
                    "acceptProxyProtocol": true, // 提醒：若你用 Nginx/Caddy 等反代 WS，需要删掉这行
                    "path": "/websocket" // 必须换成自定义的 PATH，需要和分流的一致
                }
            }
        },
        {
            "port": 2345,
            "listen": "127.0.0.1",
            "protocol": "vmess",
            "settings": {
                "clients": [
                    {
                        "id": "c4616432-97cd-4514-8979-f3a426fccdfd", // 填写你的 UUID
                        "level": 0,
                        "email": "love@example.com"
                    }
                ]
            },
            "streamSettings": {
                "network": "tcp",
                "security": "none",
                "tcpSettings": {
                    "acceptProxyProtocol": true,
                    "header": {
                        "type": "http",
                        "request": {
                            "path": [
                                "/vmesstcp" // 必须换成自定义的 PATH，需要和分流的一致
                            ]
                        }
                    }
                }
            }
        },
        {
            "port": 3456,
            "listen": "127.0.0.1",
            "protocol": "vmess",
            "settings": {
                "clients": [
                    {
                        "id": "c4616432-97cd-4514-8979-f3a426fccdfd", // 填写你的 UUID
                        "level": 0,
                        "email": "love@example.com"
                    }
                ]
            },
            "streamSettings": {
                "network": "ws",
                "security": "none",
                "wsSettings": {
                    "acceptProxyProtocol": true, // 提醒：若你用 Nginx/Caddy 等反代 WS，需要删掉这行
                    "path": "/vmessws" // 必须换成自定义的 PATH，需要和分流的一致
                }
            }
        }
    ],
    "outbounds": [
        {
            "protocol": "freedom"
        }
    ]
}


=========nginx 模版===========


server
{
        listen 80;
        listen [::]:80;
	server_name jpxx.nb06.com;
        return 301 https://$http_host$request_uri;

        access_log  /dev/null;
        error_log  /dev/null;
}

server
{
        listen 127.0.0.1:60000 proxy_protocol;
        listen 127.0.0.1:60001 http2 proxy_protocol;
	server_name jpxx.zzz.com;
        index index.html index.htm index.php default.php default.htm default.html;
        root /home/jpxx.nb06.com;
        add_header Strict-Transport-Security "max-age=63072000" always;

        location ~ /.well-known {
            allow all;
        }

        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
        {
                expires   30d;
                error_log off;
        }

        location ~ .*\.(js|css)?$
        {
                expires   12h;
                error_log off;
        }
}

======xray 奈飞分流=============

"outbounds": [
    {
      "tag":"IP4_out",
      "protocol": "freedom",
      "settings": {}
    },
    {
      "tag":"IP6_out",
      "protocol": "freedom",
      "settings": {
        "domainStrategy": "UseIPv6" // 指定使用 IPv6
      }
    }
  ],
  "routing": {
    "rules": [
      {
        "type": "field",
        "outboundTag": "IP6_out",
        "domain": ["geosite:netflix"] // netflix 走 IPv6
      },
      {
        "type": "field",
        "outboundTag": "IP4_out",
        "network": "udp,tcp"// 其余走 IPv4
      }
    ]
  }
}
================ipv6 WARP =======ipv6可看奈飞======


安装 WireGuard
apt update

apt install curl sudo lsb-release -y
添加 back­ports 源

echo "deb http://deb.debian.org/debian $(lsb_release -sc)-backports main" | sudo tee /etc/apt/sources.list.d/backports.list
su root 
sudo apt update
安装网络工具包

sudo apt install net-tools iproute2 openresolv dnsutils -y
安装 wireguard-tools

sudo apt install wireguard-tools --no-install-recommends
先执行 uname -r 命令查看内核版本。如果是 5.6 以上内核则已经集成了 Wire­Guard ，就不需要安装了。如果不是，执行下面的命令


 
sudo apt -t $(lsb_release -sc)-backports install linux-image-$(dpkg --print-architecture) linux-headers-$(dpkg --print-architecture) --install-recommends -y
重启

reboot
查看版本（ 5.6 以上就可以了）

uname -r
使用 wgcf 生成 WireGuard 配置文件
wgcf 是 Cloud­flare WARP 的非官方 CLI 工具，它可以模拟 WARP 客户端注册账号，并生成通用的 Wire­Guard 配置文件。

安装 wgcf

curl -fsSL git.io/wgcf.sh | sudo bash
注册 WARP 账户 (将生成 wgcf-account.toml 文件保存账户信息)

wgcf register
生成 Wire­Guard 配置文件 (wgcf-profile.conf)

wgcf generate
生成的两个文件记得备份好，尤其是 wgcf-profile.conf，万一未来工具失效、重装系统后可能还用得着。

编辑 WireGuard 配置文件
编辑wgcf-profile.conf文件，其中可以在服务器端解析 engage.cloudflareclient.com 的ip
nano /root/wgcf-profile.conf

nslookup engage.cloudflareclient.com
但大概率解析的结果为 162.159.192.1

将配置文件中的 engage.cloudflareclient.com 替换为 162.159.192.1，并删除 AllowedIPs = 0.0.0.0/0。即配置文件中 [Peer] 部分为：

[Peer]
PublicKey = bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=
AllowedIPs = ::/0
Endpoint = 162.159.192.1:2408

 
额外操作
每个人的vps配置文件中默认的 DNS 都不一样， 1.1.1.1。由于它将替换掉系统中的 DNS 设置 (vi /etc/resolv.conf)，同时为了防止单 DNS 服务器故障导致无法解析，建议使用不同组织提供的公共 DNS 服务器组合。以下配置供参考，小伙伴们请根据实际情况来填写。
DNS = 8.8.8.8,1.1.1.1,8.8.4.4

启用 WireGuard 网络接口
将 Wire­Guard 配置文件复制到 /etc/wireguard/ 并命名为 wgcf.conf。

sudo cp wgcf-profile.conf /etc/wireguard/wgcf.conf
开启网络接口（命令中的 wgcf 对应的是配置文件 wgcf.conf 的文件名前缀）。

sudo wg-quick up wgcf
开启网络接口

行执行ip a命令，此时能看到名为wgcf的网络接口，类似于下面这张图：
名为wgcf的网络接口

执行以下命令检查是否连通。同时也能看到正在使用的是 Cloud­flare 的网络。

curl -6 ip.p3terx.com
测试完成后关闭相关接口，因为这样配置只是临时性的。

sudo wg-quick down wgcf
正式启用 Wire­Guard 网络接口

# 启用守护进程
sudo systemctl start wg-quick@wgcf
# 设置开机启动
sudo systemctl enable wg-quick@wgcf
